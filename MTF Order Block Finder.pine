//@version=4
study("MTF Order Block Finder", overlay = true,max_bars_back=21,max_lines_count = 500, max_labels_count= 500)     
//ToolTips
tip1 = "Instituational Order Blocks (OB) often signal the beginning of a strong move. There is a high probability that OB price levels will be revisited in the future. Bullish Order Block pattern is the last down candle before a sequence of up candles. Bearish Order Block pattern is the last up candle before a sequence of down candles."
tip2 = "Find Order Blocks from different timeframes. Zone prices and positions are accurate. Order Block candles are designated by an upper, lower, and average line. Timeframes lower than the chart are ignored."
tip3 = "Required number of subsequent candles in the same direction to identify Order Block"
tip4 = "Measured from Close of the first candle to Close of the last candle in sequence. 0.30 = 0.30%"
tip6 = "LINE = 3 lines representing the High, Low, and Average price of the OB\nBOX = a solid bounded area where the Top and Bottom are the High and Low of the OB"
tip7 = "Number of Zones to draw on chart. Higher numbers lead to \"messy\" charts"
tip8 = "Invalidate the Order Block if the very first candle has a % move less than this. Useful for rejecting \"Dojis\" at the start and filtering noise. Higher values plots fewer OBs that are potentially more \"quality\".\n0.015 = 0.015%"
tip9 = "Use Fuzzy Logic to accept Order Blocks that are imperfect. Any candle (after the first) with a % move less than this will be accepted, regardless of its direction. Useful for accepting \"Doji\" candles. Higher values plots more OBs that are potentially lower in \"quality\".\n0.01 = 0.01%"
tip10 = "Remove Order blocks that are too far from current Open price. 2.5 = 2.5%"
//Experimental ToolTips
exp1 = "Shift the source candle that is used for drawing Zones. Example: For a Bullish OB, a shift of zero selects the first candle of the pattern - the Bearish candle before a sequence of Bulls.\nDefault = 1 (second candle)"
exp2 = "Choose the price values to extract from the Order Block candle. These prices are used to draw the Zone. Default is \"High/Low\".\n\"High/Low\" = High and Low of OB Candle.\n\"OHLC\" = From the High/Low of the OB Candle to the Open/Close, whichever is in the direction of the OB.\n\"Context\" = Context sensitive algorithm. Picks the largest wick near the OB candle, given a search length"
exp3 = "When using \"Context\" mode, you can tweak the search length for the Source Selector. Example: the Default of 2 will start with the first candle of the pattern and then check the following two candles"
//Setting Groups
tip11 = "Line width when using the LINE drawing style"
gp1 = "Order Block Configuration"
gp2 = "Order Block Style and Colors"
gp3 = "Experimental Settings"
gp4 = "About"
//Version + ID
version = "1.431"
id = "Telegram @DasanC"

//Documentation
doc = input(true,"Hover over ( ! ) for Intro", tooltip = tip1,group="Introduction")

//Configuration (GP1)
resolution = input("","Order Block Timeframe",input.resolution,tooltip=tip2,group=gp1)
ob_period = 1+ input(5,"Relevant Candles to Identify OB",maxval=20, minval=1,tooltip=tip3,group=gp1)   // Required number of subsequent candles in the same direction to identify Order Block
threshold = input(0.3,"Min. Percent Move for Valid OB", minval = 0,step = 0.05, tooltip=tip4,group=gp1)            // Required minimum % move (from potential OB close to last subsequent candle to identify Order Block)
bull_channels = input(4,"Max. Bullish Zones to Show",minval=0,tooltip=tip7,group=gp1)                            // Num of channels
bear_channels = input(4,"Max. Bearish Zones to Show",minval=0,tooltip=tip7,group=gp1)                            // Num of channels
doji = input(0.015,"Min. Percent Move for First Candle",minval=0,step=0.005,tooltip=tip8,group=gp1)              // Min size for first candle
fuzzy = input(0.01,"Fuzzy Logic Tolerance Percentage",minval=0,step=0.005, tooltip=tip9,group=gp1)               // Tolerance for rest of candles

//Style, Colors, and Drawing (GP2)
near_price = input(2.5," Order Blocks Draw Distance",input.float,minval=0,step=.5, tooltip=tip10,group=gp2)
style = input("BOX","Order Block Zone drawing style",options=["LINE","BOX"],tooltip=tip6,group=gp2)
bullcolor = input(color.new(color.green,65),"Bullish Zone Color",input.color,group=gp2)
bearcolor = input(color.new(color.red,65),"Bearish Zone Color", input.color,group=gp2)
linewidth_hl = input(1,"Line Width for Zone's High/Low",input.integer,minval=1,group=gp2,tooltip=tip11)
linewidth_avg = input(1,"Line Width for Zone's Avg",input.integer,minval=1,group=gp2,tooltip=tip11)

//Experimental (GP3)
ob_shift = input(1,"Order Block Candle Shift",input.integer,minval=0,maxval=10,tooltip=exp1,group=gp3)
ob_selector = input("High/Low","Order Block Source Selector",options=["High/Low","OHLC","Context"],tooltip=exp2,group=gp3)
ob_search   = input(2,"Order Block Context Search Length",input.integer,minval=0,maxval=10,tooltip=exp3,group=gp3)

//Version Control (GP4)
dummy1 = input(version,"\"MTF Order Block Finder\" Version #",options=[version],group=gp4)
dummy2 = input(id,"Contact Developer",options=[id],group=gp4,tooltip="We build indicators and robots for Traders, Prop Firms, Hedge Funds, and Family Offices!")
//Convert a given string resolution into seconds
ResolutionToSec(res)=>
    mins = res == "1" ? 1 :
           res == "3" ? 3 :
           res == "5" ? 5 :
           res == "15" ? 15 :
           res == "30" ? 30 :
           res == "45" ? 45 :
           res == "60" ? 60 :
           res == "120" ? 120 :
           res == "180" ? 180 :
           res == "240" ? 240 :
           res == "1D" ? 1440 :
           res == "1W" ? 10080 :
           res == "1M" ? 43200 : 0
    ms = mins * 60

//Convert the current chart resolution into seconds
TimeframeToSec()=>
    mins = 0.0
    if(timeframe.isdwm)
        mins := timeframe.isdaily ? 1440 :
                 timeframe.isweekly ? 10080 :
                 timeframe.ismonthly ? 43200 : mins
    if(timeframe.isintraday)
        mins := timeframe.isminutes ? 1 :
                 timeframe.isseconds ? (1/60) : mins
    ms = round(mins * 60 * timeframe.multiplier)

//Given a source type, resolution, and warmup period;
//Return 1) an array of prices with gaps removed
//       2) a bool that is True when the given resolution has new data
Rem_Gaps_Security(src,res,warm)=>
    max = security(syminfo.tickerid,res,bar_index,barmerge.gaps_off,barmerge.lookahead_off)
    gap = security(syminfo.tickerid,res,src,barmerge.gaps_on,barmerge.lookahead_off)
    clean = array.new_float()
    if (na(max) or max < warm)
        array.push(clean,na)
        [clean,false]
    else
        for i=0 to warm
            if(not na(gap[i]))
                array.push(clean,gap[i])
        [clean,not na(gap)]
        
//Destroy distant Lines and remove from array
Rem_Distant_Lines(avg,h,l,source,percent)=>
    limit = source*percent/100
    size = array.size(avg)
    if(size > 0)
        for i = 1 to size
            top=line.get_y1(array.get(h,size-i))
            bottom=line.get_y1(array.get(l,size-i))
            if(abs(top-source)>limit and abs(bottom-source)>limit)
                line.delete(array.get(avg,size-i))
                array.remove(avg,size-i)
                line.delete(array.get(h,size-i))
                array.remove(h,size-i)
                line.delete(array.get(l,size-i))
                array.remove(l,size-i)
                
//Destroy distant Boxes and remove from array
Rem_Distant_Box(arr,source,percent)=>
    limit = source*percent/100
    size = array.size(arr)
    if(size > 0)
        for i = 1 to size 
            top = box.get_top(array.get(arr,size-i))
            bottom = box.get_bottom(array.get(arr,size-i))
            if(abs(top-source)>limit and abs(bottom-source)>limit)
                box.delete(array.get(arr,size-i))
                array.remove(arr,size-i)

//Returns the lowest wick of a data set and given search range
//A 'wick' is either: Low to Open, Low to Close
Low_Wick_Search(start_index,len,copen,clow,cclose)=>
    wick_h = float(na)
    wick_l = float(na)
    index = int(na)
    for i = 0 to len
        if(array.get(clow,start_index-i) > wick_l and i > 0)
            continue
        bar_dir = sign(array.get(cclose,start_index-i) - array.get(copen,start_index-i))
        wick_h := bar_dir == 1 ? array.get(cclose,start_index-i) : array.get(copen,start_index-i)
        wick_l := array.get(clow,start_index-i)
        index := i
    [wick_h,wick_l,index]
    
//Returns the highest wick of a data set and given search range
//A 'wick' is either: High to Open, High to Close
High_Wick_Search(start_index,len,copen,chigh,cclose)=>
    wick_h = float(na)
    wick_l = float(na)
    index = int(na)
    for i = 0 to len
        if(array.get(chigh,start_index-i) < wick_h and i > 0)
            continue
        bar_dir = sign(array.get(cclose,start_index-i) - array.get(copen,start_index-i))
        wick_l := bar_dir == 1 ? array.get(copen,start_index-i) : array.get(cclose,start_index-i)
        wick_h := array.get(chigh,start_index-i)
        index := i
    [wick_h,wick_l,index]

//Alert for new candle closing in order block

//Alert for new candle closing out of order block

//Alert for candle forming wick in order block
    
//Create a horizontal line spanning one bar
Horizontal_Line(price,line_color,width,offset1,offset2)=>
    line.new(bar_index+offset1+1,price,bar_index+offset2-1,price,xloc.bar_index,color=line_color,width=width)
    
Horizontal_Line_2(price,t1,t2,line_color,width)=>
    line.new(t1,price,t2,price,xloc.bar_time,color=line_color,width=width)

//Create a vertical line spanning two prices
Vertical_Line_Small(p1,p2,line_color,width,offset)=>
    line.new(bar_index+offset,p1,bar_index+offset,p2,xloc.bar_index,color=line_color,width=width)
    
//Create a colored label
Create_Label(text,text_color,location,style,offset)=>
    label.new(bar_index+offset,0,text,xloc.bar_index,location,text_color,style,text_color,size.small)

//Create a colored label at a specific time
Create_Label_2(text,bar_time,price,text_color,style)=>
    label.new(bar_time,price,text,xloc.bar_time,yloc.price,text_color,style,text_color,size.small)
//Debugging Function to create label above candle in question
DEBUG(s)=>
    label.new(bar_index,0,s,xloc.bar_index,yloc.abovebar,color.white,size=size.normal)

//Initialization
OB_bull = false
OB_bull_chigh = float(na)
OB_bull_clow  = float(na)
OB_bull_avg  = float(na)
OB_bear = false
OB_bear_chigh = float(na)
OB_bear_clow = float(na)
OB_bear_avg = float(na)
//Init Line Arrays
var LineBullAvg = array.new_line()
var LineBullHigh = array.new_line()
var LineBullLow = array.new_line()
var LineBearAvg = array.new_line()
var LineBearHigh = array.new_line()
var LineBearLow = array.new_line()
//Init Box Arrays
var BoxBull = array.new_box()
var BoxBear = array.new_box()
//MTF Sync vars
var selector_shift = ob_shift
var os = 0
var sync = 0
var start_time = 0
var end_time = 0
res = TimeframeToSec() > ResolutionToSec(resolution) ? "" : resolution
warmup = ob_period + iff(sign(ob_shift)==-1,-1*ob_shift,0)
mtf_warmup = res == "" ? warmup : warmup * ResolutionToSec(res)/TimeframeToSec()
    //Data Curation
[copen,naopen] = Rem_Gaps_Security(open,res,mtf_warmup)
[chigh,nahigh] = Rem_Gaps_Security(high,res,mtf_warmup)
[clow,nalow] = Rem_Gaps_Security(low,res,mtf_warmup)
[cclose,naclose] = Rem_Gaps_Security(close,res,mtf_warmup)
[ctime,natime] = Rem_Gaps_Security(time,res,mtf_warmup)
    //Array with least data
MinArraySize = min(array.size(copen),
                   array.size(chigh),
                   array.size(clow),
                   array.size(cclose))

//Despawn distant objects
if(near_price>0 and barstate.islast)
    if(style=="LINE")
        Rem_Distant_Lines(LineBullAvg,LineBullHigh,LineBullLow,open,near_price)
        Rem_Distant_Lines(LineBearAvg,LineBearHigh,LineBearLow,open,near_price)
    if(style=="BOX")
        Rem_Distant_Box(BoxBull,open,near_price)
        Rem_Distant_Box(BoxBear,open,near_price)
        
//Order Block Algorithm
if(MinArraySize > warmup)
    // Bullish Order Block Identification
    bullishOB = array.get(cclose,ob_period) < array.get(copen,ob_period)        // Determine potential Bullish OB candle (red candle)
    int upcandles  = 0
    for i = 1 to ob_period-1                                                    // Check candles following the OB
        if(array.get(cclose,i) > array.get(copen,i))
            upcandles := upcandles +1
        else if(100*abs(array.get(cclose,i)-array.get(copen,i))/array.get(cclose,i) <= fuzzy)
            upcandles := upcandles +1
     // Bearish Order Block Identification
    bearishOB = array.get(cclose,ob_period) > array.get(copen,ob_period)        // Determine potential Bearish OB candle (green candle)
    int downcandles  = 0
    for i = 1 to ob_period-1                                                    // Check candles following the OB
        if(array.get(cclose,i) < array.get(copen,i))
            downcandles := downcandles +1
        else if(100*abs(array.get(cclose,i)-array.get(copen,i))/array.get(cclose,i) <= fuzzy)
            downcandles := downcandles +1
    
    //Entire OB sequence has enough price movement to be valid (filter low volatility noise)
    relmove   = 100*((abs(array.get(cclose,ob_period) - array.get(cclose,1)))/array.get(cclose,ob_period))>=threshold
    //Can't start with a Doji (active by default)
    doji_candle = 100*abs(array.get(cclose,ob_period)-array.get(copen,ob_period))/array.get(cclose,ob_period) >= doji
            
    // Timeframe must have non-NaN data, Price action must be valid, Cannot be Doji
    if(doji_candle and relmove)                          
        OB_bull := bullishOB and (upcandles == (ob_period-1))           // Identification logic (red OB candle & subsequent green candles)
        OB_bear := bearishOB and (downcandles == (ob_period-1))         // Identification logic (green OB candle & subsequent green candles)
        if(OB_bull)
            if(ob_selector == "Context")
                [temp_high,temp_low,index] = Low_Wick_Search(ob_period,ob_search,copen,clow,cclose)
                selector_shift := index
                OB_bull_chigh := temp_high
                OB_bull_clow := temp_low
            else if(ob_selector == "High/Low")
                OB_bull_chigh   := array.get(chigh,ob_period-selector_shift)          //Determine OB upper limit (High)
                OB_bull_clow    := array.get(clow,ob_period-selector_shift)           //Determine OB lower limit (Low)
            else if(ob_selector == "OHLC")
                [temp_high,temp_low,index] = Low_Wick_Search(ob_period-selector_shift,0,copen,clow,cclose)
                OB_bull_chigh := temp_high
                OB_bull_clow := temp_low
            OB_bull_avg     := (OB_bull_chigh + OB_bull_clow)/2                 // Determine OB average
        if(OB_bear)
            if(ob_selector == "Context")
                [temp_high,temp_low,index] = High_Wick_Search(ob_period,ob_search,copen,chigh,cclose)
                selector_shift := index
                OB_bear_chigh := temp_high
                OB_bear_clow := temp_low
            else if(ob_selector == "High/Low")
                OB_bear_chigh   := array.get(chigh,ob_period-selector_shift)          // Determine OB upper limit (High)
                OB_bear_clow    := array.get(clow,ob_period-selector_shift)           // Determine OB clower limit (Low)
            else if(ob_selector == "OHLC")
                [temp_high,temp_low,index] = High_Wick_Search(ob_period-selector_shift,0,copen,chigh,cclose)
                OB_bear_chigh := temp_high
                OB_bear_clow := temp_low
            OB_bear_avg     := (OB_bear_clow + OB_bear_chigh)/2                 // Determine OB average
    
    //Create Zones based on user selection
    sync := time_close(res) - (res=="" ? TimeframeToSec()*1000 : ResolutionToSec(res)*1000)
    if(style=="LINE")
        //Bullish Channel Creation
        if(OB_bull and bull_channels>0)
            if array.size(LineBullAvg) == bull_channels
                line.delete(array.get(LineBullAvg,0))
                array.remove(LineBullAvg,0)
                line.delete(array.get(LineBullHigh,0))
                array.remove(LineBullHigh,0)
                line.delete(array.get(LineBullLow,0))
                array.remove(LineBullLow,0)
            array.push(LineBullAvg,line.new(x1 = sync, xloc=xloc.bar_time, y1 = OB_bull_avg, x2 = sync+12, y2 = OB_bull_avg, extend = extend.right, color = bullcolor, style = line.style_solid, width = linewidth_avg))
            array.push(LineBullHigh,line.new(x1 = sync, xloc=xloc.bar_time,y1 = OB_bull_chigh, x2 = sync+12, y2 = OB_bull_chigh, extend = extend.right, color = bullcolor, style = line.style_dashed, width = linewidth_hl))
            array.push(LineBullLow,line.new(x1 = sync, xloc=xloc.bar_time, y1 = OB_bull_clow, x2 = sync+12, y2 = OB_bull_clow, extend = extend.right, color = bullcolor, style = line.style_dashed, width = linewidth_hl))
        //Bearish Channel Creation
        if(OB_bear and bear_channels>0)
            if array.size(LineBearAvg) == bear_channels
                line.delete(array.get(LineBearAvg,0))
                array.remove(LineBearAvg,0)
                line.delete(array.get(LineBearHigh,0))
                array.remove(LineBearHigh,0)
                line.delete(array.get(LineBearLow,0))
                array.remove(LineBearLow,0)
            array.push(LineBearAvg,line.new(x1 = sync, xloc=xloc.bar_time, y1 = OB_bear_avg, x2 = sync+12, y2 = OB_bear_avg, extend = extend.right, color = bearcolor, style = line.style_solid, width = linewidth_avg))
            array.push(LineBearHigh,line.new(x1 = sync, xloc=xloc.bar_time, y1 = OB_bear_chigh, x2 = sync+12, y2 = OB_bear_chigh, extend = extend.right, color = bearcolor, style = line.style_dashed, width = linewidth_hl))
            array.push(LineBearLow,line.new(x1 = sync, xloc=xloc.bar_time, y1 = OB_bear_clow, x2 = sync+12, y2 = OB_bear_clow, extend = extend.right, color = bearcolor, style = line.style_dashed, width = linewidth_hl))
    if(style=="BOX")
        //Bullish Box Creation
        if(OB_bull and bull_channels>0)
            if array.size(BoxBull) == bull_channels
                box.delete(array.get(BoxBull,0))
                array.remove(BoxBull,0)
            array.push(BoxBull,box.new(xloc=xloc.bar_time, left = sync, top = OB_bull_chigh, right = sync+12, bottom = OB_bull_clow, extend = extend.right, border_width=0, bgcolor = bullcolor))
        //Bearish Box Creation
        if(OB_bear and bear_channels>0)
            if array.size(BoxBear) == bear_channels
                box.delete(array.get(BoxBear,0))
                array.remove(BoxBear,0)
            array.push(BoxBear,box.new(xloc=xloc.bar_time, left = sync, top = OB_bear_chigh, right = sync+12, bottom = OB_bear_clow, extend = extend.right, border_width=0, bgcolor = bearcolor))

    //Offset Calculation  
    var sync_mult = ResolutionToSec(res)/TimeframeToSec()
    os := -(ob_period-selector_shift) * (res == "" ? 1 : sync_mult)
    start_time := round(array.get(ctime,ob_period-selector_shift))
    end_time := round(array.get(ctime,ob_period-selector_shift-1))
    avg_time = round((start_time + end_time)/2)
    
    //Custom Line/Label plotting
    if(OB_bull)
        _bc = color.new(bullcolor,0)
        if(res=="")
            Create_Label("Bull OB",_bc,yloc.belowbar,label.style_none,os)
            Horizontal_Line(OB_bull_chigh,_bc,2,os,os - sync_mult)
            Horizontal_Line(OB_bull_clow,_bc,2,os,os - sync_mult)
            Horizontal_Line(OB_bull_avg,_bc,1,os,os - sync_mult)
        else
            Create_Label_2("Bull OB",avg_time,OB_bull_clow,_bc,label.style_none)
            Horizontal_Line_2(OB_bull_chigh,start_time-1,end_time,_bc,2)
            Horizontal_Line_2(OB_bull_clow,start_time,end_time,_bc,2)
            Horizontal_Line_2(OB_bull_avg,start_time,end_time,_bc,1)
    if(OB_bear)
        _bc = color.new(bearcolor,0)
        if(res=="")
            Create_Label("Bear OB",_bc,yloc.abovebar,label.style_none,os)
            Horizontal_Line(OB_bear_chigh,_bc,2,os,os - sync_mult)
            Horizontal_Line(OB_bear_clow,_bc,2,os,os - sync_mult)
            Horizontal_Line(OB_bear_avg,_bc,1,os,os - sync_mult)
        else
            Create_Label_2("Bear OB",avg_time,OB_bear_chigh,_bc,label.style_none)
            Horizontal_Line_2(OB_bear_chigh,start_time-1,end_time,_bc,2)
            Horizontal_Line_2(OB_bear_clow,start_time,end_time,_bc,2)
            Horizontal_Line_2(OB_bear_avg,start_time,end_time,_bc,1)
        
//Alert Conditions
alertcondition(OB_bull,"New Bullish Order Block")                               //New OBs
alertcondition(OB_bear,"New Bearish Order Block")
